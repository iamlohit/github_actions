name: Conditional Exec Flow
on:
    push: 
        branches: [ main ]
        paths:
            - '.github/workflows/06-conditional-exec-flow.yml'
            - 'code/03-practice-project/'

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Get code
              uses: actions/checkout@v3
            - name: Cache Dependencies #To cache the dependencies downloaded in the next step. This is just the name of the steps.
              uses: actions/cache@v3
              with:
                path: ~/.npm #This is the NPM folder where NPM downloads the dependencies.enableCrossOsArchive: 
                key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} #This creates a hash file for a given package-lock.json file and hash changes if changes are made to this file. That is how the cache is invalidated.
            - name: Install Dependencies
              run: npm ci
              working-directory: code/03-practice-project/
            - name: Lint
              run: npm run lint
              working-directory: code/03-practice-project/

    test:
        runs-on: ubuntu-latest
        steps:
            - name: Get code
              uses: actions/checkout@v3
            - name: Cache Dependencies #To cache the dependencies downloaded in the next step. This is just the name of the steps.
              uses: actions/cache@v3
              with:
                path: ~/.npm #This is the NPM folder where NPM downloads the dependencies.enableCrossOsArchive: 
                key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} #This creates a hash file for a given package-lock.json file and hash changes if changes are made to this file. That is how the cache is invalidated.
            - name: Install Dependencies
              run: npm ci
              working-directory: code/03-practice-project/
            - name: Run tests
              id: run-tests #This is a user chosen ID used to reference this step elsewhere, in our cast its used in the if statement in next step.
              run: npm run test
              working-directory: code/03-practice-project/
            - name: Upload test report #By default, if a step fails, everything beyond the step and jobs fail.
              if: failure() && steps.run-tests.outcome == 'failure'
              # Here we are saying that if the run-tests step succeeds, dont upload a report file, but if it fails, do upload a test-report file.
              # Which is the opposite of the default behaviour since if run-tests fails, by default further steps & jobs wont be executed.
              # Now we use one of githusb 4 built in functions that returns a boolean true or false.
              # These are failure() success() always() & cancelled()
              # Here we are making it specific, since the failure() can return true if any of the steps before the condition fails,
              # So we say, if any of previous steps fail AND its due to the run-tests failing, then upload the test report.
              # However, if we make no further changes to this file, other jobs downstream will be skipped by default which makes sense.
              uses: actions/upload-artifact@v3
              with:
                name: test-report
                path: code/03-practice-project/test.json
    build:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - name: Get code
              uses: actions/checkout@v3
            - name: Cache Dependencies #To cache the dependencies downloaded in the next step. This is just the name of the steps.
              uses: actions/cache@v3
              with:
                path: ~/.npm #This is the NPM folder where NPM downloads the dependencies.enableCrossOsArchive: 
                key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} #This creates a hash file for a given package-lock.json file and hash changes if changes are made to this file. That is how the cache is invalidated.
            - name: Install Dependencies
              run: npm ci
              working-directory: code/03-practice-project/
            - name: Build website
              run: npm run build
              working-directory: code/03-practice-project/
            - name: Upload Artifacts
              uses: actions/upload-artifact@v3
              with:
                name: dist-files #The name is upto us, but this is needed to reference these files in other jobs below, like deploy.
                path: code/03-practice-project/dist #This notes the folder where you need to store the files/artifact.
                     
    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Get build artifacts
              uses: actions/download-artifact@v3
              with:
                name: dist-files
            - name: Output Contents
              run: ls
            - name: Deploy
              run: echo "Deploying...."

    report: # Creating a new job to report what went wrong.
        needs: [ lint, deploy ] # If we do not introduce this need, then it will run in parallel with Lint and hence never run.
        if: failure()
        # This expression/condition above calls the below function if any of the previous job fails, but it needs to run in sequence, not in parallel.
        runs-on: ubuntu-latest
        steps:
            - name: Output information
              run: |
                echo "Something went wrong"
                echo "${{ github }}"